name: Build Fortran Executables

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    timeout-minutes: 240  # Increased the timeout to 240 minutes (4 hours)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Compiler Tools and Dependencies
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          # Install required tools directly via apt on Linux
          sudo apt-get update
          sudo apt-get install -y build-essential curl file git gfortran cmake
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # On macOS, use Homebrew to install dependencies
          brew update
          brew install gfortran json-fortran
        fi

    - name: Cache json-fortran Build
      uses: actions/cache@v3
      with:
        path: json-fortran/build
        key: ${{ runner.os }}-jsonfortran-${{ hashFiles('json-fortran/*') }}
        restore-keys: |
          ${{ runner.os }}-jsonfortran-

    - name: Clone and Build json-fortran
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Clone json-fortran with a shallow clone to reduce time
        git clone --depth=1 https://github.com/jacobwilliams/json-fortran.git
        cd json-fortran
        mkdir -p build
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local
        make -j$(nproc)  # For Linux, use all available CPU cores
        sudo make install BIN_PATH=build
        cd ../..

    - name: Set Include and Library Paths
      run: |
        export C_INCLUDE_PATH=/usr/local/include:$C_INCLUDE_PATH
        export LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH
        export FCFLAGS="-I/usr/local/jsonfortran-gnu-9.0.2/lib"
        echo "C_INCLUDE_PATH=$C_INCLUDE_PATH" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$LIBRARY_PATH" >> $GITHUB_ENV
        echo "FCFLAGS=$FCFLAGS" >> $GITHUB_ENV

    - name: Build Executable
      run: |
        chmod +x build.sh
        ./build.sh || exit_code=$?
        # If build.sh fails, cat the compile output to the log
        if [ -f compile_output.txt ]; then
          cat compile_output.txt
        fi
        # Exit with the original error code if it failed
        exit $exit_code || true

    - name: Move Executable
      if: success()
      run: |
        mv seidart src/executables/${{ matrix.os }}

    - name: Upload Executable Artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: seidart_executables_${{ matrix.os }}
        path: src/executables/${{ matrix.os }}
